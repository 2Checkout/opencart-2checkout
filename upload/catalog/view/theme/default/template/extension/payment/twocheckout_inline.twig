<form id="tco-payment-form">
    <button class="btn btn-primary pull-right" id="placeOrderTcoInline">{{ button_confirm }}</button>
    <div class="clearfix"></div>
</form>

<script>
    var params = {{ payload }};
    $(document).ready(function () {
        resetTwoCheckout();
        $('body').on('click', '#placeOrderTcoInline', function (event) {
            event.preventDefault();
            twoCheckoutInline();
        });
    });

    function resetTwoCheckout() {
        if (window.hasOwnProperty('TwoCoInlineCart')) {
            delete window['TwoCoInlineCart'];
        }
        if ($('#TwoCheckoutScript').length) {
            $('#TwoCheckoutScript').remove();
        }
        if ($('#cart-wrapper').length) {
            $('#cart-wrapper').remove();
        }
    }

    // dont ask why this function is need it...
    function getParams() {
        return params;
    }

    function twoCheckoutInline() {
        var payload = getParams();
        (function (document, src, libName, config) {
            var script = document.createElement('script');
            script.src = src + '?v=' + (new Date()).getTime();
            script.id = 'TwoCheckoutScript';
            script.async = true;
            var firstScriptElement = document.getElementsByTagName('script')[0];
            script.onload = function () {
                for (var namespace in config) {
                    if (config.hasOwnProperty(namespace)) {
                        window[libName].setup.setConfig(namespace, config[namespace]);
                    }
                }
                window[libName].register();
                TwoCoInlineCart.setup.setMerchant(payload['merchant']);
                TwoCoInlineCart.setup.setMode('DYNAMIC');
                TwoCoInlineCart.register();
                TwoCoInlineCart.products.removeAll();
                TwoCoInlineCart.cart.setAutoAdvance(true);
                TwoCoInlineCart.cart.setReset(true); // erase previous cart sessions

                TwoCoInlineCart.cart.setCurrency(payload['currency']);
                TwoCoInlineCart.cart.setLanguage(payload['language']);
                TwoCoInlineCart.cart.setReturnMethod(payload['return-method']);
                TwoCoInlineCart.cart.setTest(payload['test']);
                TwoCoInlineCart.cart.setOrderExternalRef(payload['order-ext-ref']);
                TwoCoInlineCart.cart.setExternalCustomerReference(payload['customer-ext-ref']);
                TwoCoInlineCart.cart.setSource(payload['src']);

                TwoCoInlineCart.products.addMany(payload['products']);
                TwoCoInlineCart.billing.setData(payload['billing_address']);
                TwoCoInlineCart.billing.setCompanyName(payload['billing_address']['company-name']);
                TwoCoInlineCart.shipping.setData(payload['shipping_address']);
                TwoCoInlineCart.cart.setSignature(payload['signature']);
                TwoCoInlineCart.cart.checkout();
            };
            if (!$('#TwoCheckoutScript').length) {
                firstScriptElement.parentNode.insertBefore(script, firstScriptElement);
            }
        })(document, 'https://secure.2checkout.com/checkout/client/twoCoInlineCart.js', 'TwoCoInlineCart',
            {'app': {'merchant': payload['merchant']}, 'cart': {'host': 'https:\/\/secure.2checkout.com'}}
        );
    }
</script>
